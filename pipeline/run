#!/usr/bin/env bash

export BOILERPLATE_NO_COLOR="true"
export BOILERPLATE_NO_EMPTY_LINE="true"

# shellcheck source=./lib/bash/core.sh
source "${BASH_SOURCE[0]%/*}/../lib/bash/core.sh"

# shellcheck source=./lib/bash/node.sh
source "${BASH_SOURCE[0]%/*}/../lib/bash/node.sh"

function main() {

  local COMMAND="${1:-}"

  if [[ -n "${COMMAND}" && "${COMMAND}" != "-"* ]]; then
    if jq --exit-status ".scripts.\"start:${COMMAND}\"" "./package.json" >/dev/null; then
      COMMAND="start:${COMMAND}"
    elif ! jq --exit-status ".scripts.\"${COMMAND}\"" "./package.json" >/dev/null; then
      echo "Script '${COMMAND}' not found." >&2
      return 1
    fi
    shift
  else
    if [[ "${COMMAND}" == "--" ]]; then
      shift
    fi
    COMMAND=""
  fi

  if [[ -z "${COMMAND}" ]]; then
    COMMAND="start"
  fi

  echo -e "${OK_COLOR}==> Running app..."

  loadEnvKey --

  local PROJECT_KEY
  PROJECT_KEY="$(projectKey)"

  local LOG_FILE
  LOG_FILE="$(mktemp)"

  export NODE_ENV="production"
  export BOILERPLATE_LOG_TIME="true"

  local NPM
  NPM="$(command -v npm)"

  # "time": Show running time of the process
  # "wrap": Show timestamp at the beginning of the command
  # "tee": outputs to both file and console

  set +e
  (
    set -x
    time wrap \
      "${NPM}" run "${COMMAND[@]}" "$@" |
      tee -a -i "${LOG_FILE}"
  )
  local EXIT_CODE="$?"
  set -e

  echo
  echo "EXIT_CODE = ${EXIT_CODE}"

  # Codes:
  # - 0: success
  # - 130: killed in local by user (Ctrl+C)
  if [[ "${EXIT_CODE}" != 0 && "${EXIT_CODE}" != 130 ]]; then

    local ERROR_MESSAGE
    ERROR_MESSAGE="$(
      grep -E "STDERR .*Error: " "${LOG_FILE}" ||
        echo "[Not found]"
    )"

    local DATA
    DATA="$(
      echo '{}' |
        jq \
          --compact-output \
          --arg projectKey "${PROJECT_KEY}" \
          --arg "command" "${COMMAND}" \
          --arg exitCode "${EXIT_CODE}" \
          --arg errorMessage "${ERROR_MESSAGE}" \
          --arg consoleLog "$(tail -80 <"${LOG_FILE}")" \
          '.main = {
            "attachments": [
              {
                "fallback": "<!channel> [\($projectKey)][\($command)] crashed with exit code \($exitCode)",
                "color": "danger",
                "text": "<!channel> *`\($projectKey)`* *`\($command)`* crashed with exit code *\($exitCode)*.\n\n*Error Message*\n```\($errorMessage)```\n\n*Console Log*\n```\($consoleLog)```",
              }
            ]
          } | .main'
    )"
    # echo "DATA = '${DATA}'"

    (
      # set -x
      slack-send "${DATA}"
    )

  fi

  rm -rf "${LOG_FILE}"

  return "${EXIT_CODE}"
}

main "$@"
